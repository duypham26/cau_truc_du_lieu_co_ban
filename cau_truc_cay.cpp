/*C√¢y nh·ªã ph√¢n

Vi·∫øt ch∆∞∆°ng tr√¨nh nh·∫≠p m·ªôt d√£y s·ªë nguy√™n (t·ªëi ƒëa 15 ph·∫ßn t·ª≠) v√† l∆∞u tr·ªØ d∆∞·ªõi d·∫°ng c√¢y nh·ªã ph√¢n b·∫•t k·ª≥.

.Hi·ªÉn th·ªã c√¢y d∆∞·ªõi d·∫°ng duy·ªát ti·ªÅn t·ª± (Pre-order), trung t·ª± (In-order), v√† h·∫≠u t·ª± (Post-order).

.C√¢y nh·ªã ph√¢n t√¨m ki·∫øm (BST)

.T·ª´ d√£y s·ªë nguy√™n tr√™n, x√¢y d·ª±ng c√¢y nh·ªã ph√¢n t√¨m ki·∫øm.

.Vi·∫øt h√†m t√¨m ki·∫øm m·ªôt ph·∫ßn t·ª≠ trong c√¢y.

.Vi·∫øt h√†m x√≥a m·ªôt ph·∫ßn t·ª≠ trong c√¢y v√† hi·ªÉn th·ªã k·∫øt qu·∫£ sau khi x√≥a.

C√¢y nh·ªã ph√¢n t√¨m ki·∫øm c√¢n b·∫±ng (AVL)

Vi·∫øt ch∆∞∆°ng tr√¨nh x√¢y d·ª±ng c√¢y AVL t·ª´ c√πng d√£y s·ªë nguy√™n.

Minh h·ªça qu√° tr√¨nh quay ƒë∆°n/tr√°i/ph·∫£i ho·∫∑c quay k√©p n·∫øu c√≥.

Hi·ªÉn th·ªã ƒë·ªô cao c·ªßa c√¢y sau m·ªói l·∫ßn ch√®n.

C√¢y B (B-Tree)

Cho m·ªôt b·∫≠c 
ùëö
=
3
m=3. Vi·∫øt ch∆∞∆°ng tr√¨nh x√¢y d·ª±ng c√¢y B v·ªõi b·∫≠c n√†y t·ª´ c√πng d√£y s·ªë nguy√™n.

Th·ª±c hi·ªán thao t√°c ch√®n l·∫ßn l∆∞·ª£t t·ª´ng ph·∫ßn t·ª≠ v√† hi·ªÉn th·ªã c√¢y sau m·ªói l·∫ßn ch√®n.

Vi·∫øt h√†m t√¨m ki·∫øm m·ªôt ph·∫ßn t·ª≠ trong c√¢y B.*/
#include <iostream>
#include <string>
using namespace std; 
const int LH = -1;
const int EH = 0;
const int RH = 1;
void xuong_dong()
{
    cout<<endl;
}

struct nodetree
{
    char chi_so_can_bang;//belance factor
    int key;
    nodetree *left;
    nodetree *right;
    nodetree *parent;
};
typedef struct nodetree *TREE;
void create(TREE &cay_nhi_phan)
{
    cay_nhi_phan = NULL;
}
nodetree* create_node(int t)
{
    nodetree *x = new nodetree;
    if (x == NULL) {return NULL;}
    x->key = t;
    x->left = x->right = NULL;
    return x;
}
bool them_node(TREE cay_nhi_phan, int t)
{
    if (cay_nhi_phan != NULL)
    {
        if ( t==cay_nhi_phan->key)
        {
            return false;
        }
        if (cay_nhi_phan->key < t)
        {
            return them_node(cay_nhi_phan->right, t);
        }
        else
        {
            return them_node(cay_nhi_phan->left,t);
        }
    }
    cay_nhi_phan = create_node(t);
    return true;

}
/*
6 cach duyet cay nhi phan:
- node left right
- node right left | tien tu
- left node right 
- right node left | trung tu
- right left node
- left right node | hau tu
* nguoc voi chuan duoc quyet dinh dua tren trai va phai duoc duyet truoc
*/
void duyet_NRL(TREE goc)//tien tu
{
    if (goc == NULL)return;
    cout<<goc->key<<" ";
    duyet_NRL(goc->right);
    duyet_NRL(goc->left);
}
void duyet_RNL(TREE goc)//trung tu
{
    if (goc == NULL)return;
    duyet_RNL(goc->right);
    cout<<goc->key<<" ";
    duyet_RNL(goc->left);

}
void duyet_LRN(TREE goc)
{
    if (goc == NULL)return;
    duyet_LRN(goc->left);
    duyet_LRN(goc->right);
    cout<<goc->key<<" ";

}
//tuong tu voi cac thuat toan duyet cay khac

//ham tim kiem phan tu trong cay
bool search(TREE goc, TREE t)
{
    
    if (goc == NULL)return false;
    if (t->key == goc->key)
    {
        return true;
    }
    bool check_right = search(goc->right,t);
    bool check_left = search(goc->left,t); 
    return check_right||check_left;
}

//thay 1 phan tu trong cay
void thay_node(TREE goc, TREE goc_phai_trai_nhat)
{
    if (goc_phai_trai_nhat->left != NULL)
    {
        thay_node(goc,goc_phai_trai_nhat->left);
    }
    else
    {
        goc = goc_phai_trai_nhat;
        goc_phai_trai_nhat = goc_phai_trai_nhat->right;

    }
}
//xoa 1 phan tu trong cay:
void xoa_node(TREE t,int x)
{
    if (t == NULL)cout<<"node khong ton tai"<<endl;
    else{
        if (t->key <x)
        xoa_node(t->right,x);
        else{
            if (t->key>x)
            xoa_node(t->left,x);
            else 
            {
                nodetree *tam = t;
                if (t->left == NULL)t = t->right;
                else{
                    if (t->right==NULL)t = t->left;
                    else
                    {
                        thay_node(t,t->right);
                    }
                }
                delete t;
            }
        }
    }
}
